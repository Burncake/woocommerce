AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation template for deploying a WooCommerce application on AWS.'

Parameters:
  VpcName:
    Type: String
    Default: WooCommerceVPC
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1CIDR:
    Type: String 
    Default: 10.0.1.0/24
  PublicSubnet2CIDR:
    Type: String 
    Default: 10.0.2.0/24
  PrivateSubnet1CIDR:
    Type: String 
    Default: 10.0.3.0/24
  PrivateSubnet2CIDR:
    Type: String
    Default: 10.0.4.0/24
  WordPressImageId:
    Type: AWS::EC2::Image::Id
    Description: The AMI ID for the initial "WordPress Certified by Bitnami and Automattic" image in us-east-1. This AMI ID is region-specific and may change over time. Please verify the latest AMI ID in the AWS Marketplace before deploying this template.
    Default: ami-0c46db45b631d4cf5 # Example AMI ID for us-east-1
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair for SSH access.
  EC2InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
      - t3a.micro
    Description: EC2 instance type to launch for the WooCommerce application.
  TagKey:
    Type: String
    Description: Key for tagging resources in this template.
    Default: project
  TagValue:
    Type: String
    Description: Value for tagging resources in this template.
    Default: e-commerce

Resources:

  ############################################################################################
  # VPC and Internet Gateway
  ############################################################################################

  VPC:
    Type: AWS::EC2::VPC
    DeletionPolicy: Delete
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref VpcName
        - Key: !Ref TagKey
          Value: !Ref TagValue

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DeletionPolicy: Delete
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-IGW"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DeletionPolicy: Delete
    DependsOn: [VPC, InternetGateway]
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ############################################################################################
  # Public Subnets
  ############################################################################################
  
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-PublicSubnet1"
        - Key: !Ref TagKey
          Value: !Ref TagValue
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-PublicSubnet2"
        - Key: !Ref TagKey
          Value: !Ref TagValue
  
  ############################################################################################
  # Private Subnets
  ############################################################################################

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-PrivateSubnet1"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-PrivateSubnet2"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ############################################################################################
  # Public Route Table
  ############################################################################################

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-PublicRouteTable"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  PublicRoute:
    Type: AWS::EC2::Route
    DeletionPolicy: Delete
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    DependsOn: [PublicRouteTable, PublicSubnet1]
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    DependsOn: [PublicRouteTable, PublicSubnet1]
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ############################################################################################
  # Private Route Table
  ############################################################################################

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-PrivateRouteTable"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    DependsOn: [PrivateRouteTable, PrivateSubnet1]
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    DependsOn: [PrivateRouteTable, PrivateSubnet2]
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ############################################################################################
  # S3 Gateway Endpoint
  ############################################################################################

  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      RouteTableIds:
        - !Ref PrivateRouteTable
      VpcEndpointType: Gateway
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-S3GatewayEndpoint"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ############################################################################################
  # Security Groups
  ############################################################################################

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Allow HTTP, HTTPS, and SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-EC2SecurityGroup"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    DependsOn: EC2SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access from EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-RDSSecurityGroup"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ElasticacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    DependsOn: EC2SecurityGroup
    Properties:
      GroupDescription: Allow Memcached access from EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 11211
          ToPort: 11211
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-ElasticacheSecurityGroup"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ############################################################################################
  # IAM Role
  ############################################################################################

  EC2S3Role:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-EC2S3Role"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  EC2S3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DeletionPolicy: Delete
    Properties:
      Roles:
        - !Ref EC2S3Role
      Path: /

  ############################################################################################
  # EC2 Instance
  ############################################################################################

  InitWooCommerceInstance:
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
    DependsOn: [EC2S3InstanceProfile, EC2SecurityGroup, PublicSubnet1]
    Properties:
      ImageId: !Ref WordPressImageId
      InstanceType: !Ref EC2InstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp3
            DeleteOnTermination: true
      IamInstanceProfile: !Ref EC2S3InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-WooCommerceInstance"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ##############################################################################################
  # Memcached Cluster
  ##############################################################################################

  MemcachedSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    DeletionPolicy: Delete
    Properties:
      Description: Subnet group for Memcached cluster
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      CacheSubnetGroupName: !Sub "${VpcName}-MemcachedSubnetGroup"
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-MemcachedSubnetGroup"
        - Key: !Ref TagKey
          Value: !Ref TagValue
  
  MemcachedCluster:
    Type: AWS::ElastiCache::CacheCluster
    DeletionPolicy: Delete
    Properties:
      CacheNodeType: cache.t3.micro
      Engine: memcached
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref MemcachedSubnetGroup
      VpcSecurityGroupIds:
        - !Ref ElasticacheSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-MemcachedCluster"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ############################################################################################
  # S3 Bucket
  ############################################################################################

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "woocommerce-bucket-${AWS::Region}-${AWS::AccountId}"
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ############################################################################################
  # CloudFront Distribution
  ############################################################################################

  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    DeletionPolicy: Delete
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${VpcName}-S3OriginAccessControl"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    DeletionPolicy: Delete
    DependsOn: [S3Bucket, CloudFrontOAC]
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !Ref CloudFrontOAC
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
      Tags:
        - Key: Name
          Value: !Sub "${VpcName}-CloudFrontDistribution"
        - Key: !Ref TagKey
          Value: !Ref TagValue

  ############################################################################################
  # S3 Bucket Policy
  ############################################################################################

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Delete
    DependsOn: [S3Bucket, CloudFrontDistribution]
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action:
              - s3:GetObject
            Resource: !Sub "${S3Bucket.Arn}/*"
            Condition:
              StringEquals:
                aws:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

############################################################################################
# Output
############################################################################################

Outputs:
  VpcId:
    Value: !Ref VPC
  PublicSubnet1Id:
    Value: !Ref PublicSubnet1
  PublicSubnet2Id:
    Value: !Ref PublicSubnet2
  PrivateSubnet1Id:
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Value: !Ref PrivateSubnet2
  S3GatewayEndpointId:
    Value: !Ref S3GatewayEndpoint
  EC2InstanceId:
    Value: !Ref InitWooCommerceInstance
  EC2InstancePublicIP:
    Value: !GetAtt InitWooCommerceInstance.PublicIp
  EC2S3RoleArn:
    Value: !GetAtt EC2S3Role.Arn
  MemcachedClusterEndpoint:
    Value: !GetAtt MemcachedCluster.ConfigurationEndpoint.Address
  MemcachedClusterPort:
    Value: !GetAtt MemcachedCluster.ConfigurationEndpoint.Port
  S3BucketName:
    Value: !Ref S3Bucket
  CloudFrontURL:
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    